use std::str::FromStr;
use crate::ast;

grammar;

pub Program: ast::Program = {
    <Stmt+> => <>,
};

Stmt: ast::Stmt = {
    DefStmt => ast::Stmt::DefStmt(<>),
    Term => ast::Stmt::ExprStmt(<>),
};

DefStmt: ast::Def = {
    <name:Ident> "=" <expr:Term> => ast::Def{name, expr},
}

Term: ast::Expr = {
    "(" <Expr> ")" => <>,
    Expr,
};

Expr: ast::Expr = {
    Identifier => ast::Expr::Identifier(<>),
    Abstruction => ast::Expr::Abstruction(<>),
    Application => ast::Expr::Application(<>),
    Literal => ast::Expr::Literal(<>),
};

Abstruction: ast::Abstruction = {
    "\\" <args:Ident+> "." <expr:Term>
     => ast::Abstruction{args, body:Box::new(expr)}
};

Identifier: ast::Identifier = {
    Ident,
    ExternIdent => ast::Identifier::ExternIdentifier(<>),
};

Application: ast::Application  = {
    "$" <left:Term> <right:Term>
        => ast::Application{left: Box::new(left), right: Box::new(right)},
};

Literal: String = {
    Num,
};

Num: String = r"[0-9]+" => <>.to_string();

Ident: ast::Identifier = <r"[a-z]\w*">
    => ast::Identifier::Identifier(<>.to_string() + &"_lambda");

ExternIdent: String = {
     <i:r"[!][a-z][\w\.]*"> => <>.to_string().replace("!", ""),
}

SemiColon<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};
